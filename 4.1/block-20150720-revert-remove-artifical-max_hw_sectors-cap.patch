From: Jeff Moyer <jmoyer@redhat.com>
Newsgroups: gmane.linux.kernel
Subject: [patch] Revert "block: remove artifical max_hw_sectors cap"
Date: Mon, 20 Jul 2015 15:17:07 -0400
Archived-At: <http://permalink.gmane.org/gmane.linux.kernel/2000594>

Hi,

This reverts commit 34b48db66e08, which caused significant iozone
performance regressions and uncovered a silent data corruption
bug in at least one disk.

For SAN storage, we've seen initial write and re-write performance drop
25-50% across all I/O sizes.  On locally attached storage, we've seen
regressions of 40% for all I/O types, but only for I/O sizes larger than
1MB.

In addition to the performance issues, we've also seen data corruption
on one disk/hba combination.  See
  http://marc.info/?l=linux-ide&m=143680539400526&w=2

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>

---

I'm open to other suggestions on how to address this, but the
performance regression is seen across a number of our different test
platforms, and the silent data corruption really scares me.  Did we
ever get performance numbers that showed a benefit to lifting the
max_sectors_kb cap?

diff --git a/block/blk-settings.c b/block/blk-settings.c
index 12600bf..b160f89 100644
--- a/block/blk-settings.c
+++ b/block/blk-settings.c
@@ -257,7 +257,9 @@ void blk_limits_max_hw_sectors(struct queue_limits *limits, unsigned int max_hw_
 		       __func__, max_hw_sectors);
 	}
 
-	limits->max_sectors = limits->max_hw_sectors = max_hw_sectors;
+	limits->max_hw_sectors = max_hw_sectors;
+	limits->max_sectors = min_t(unsigned int, max_hw_sectors,
+				    BLK_DEF_MAX_SECTORS);
 }
 EXPORT_SYMBOL(blk_limits_max_hw_sectors);
 
diff --git a/drivers/block/aoe/aoeblk.c b/drivers/block/aoe/aoeblk.c
index 46c282f..dd73e1f 100644
--- a/drivers/block/aoe/aoeblk.c
+++ b/drivers/block/aoe/aoeblk.c
@@ -395,7 +395,7 @@ aoeblk_gdalloc(void *vp)
 	WARN_ON(d->flags & DEVFL_TKILL);
 	WARN_ON(d->gd);
 	WARN_ON(d->flags & DEVFL_UP);
-	blk_queue_max_hw_sectors(q, 1024);
+	blk_queue_max_hw_sectors(q, BLK_DEF_MAX_SECTORS);
 	q->backing_dev_info.name = "aoe";
 	q->backing_dev_info.ra_pages = READ_AHEAD / PAGE_CACHE_SIZE;
 	d->bufpool = mp;
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index d4068c1..1fd459e1 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -1138,6 +1138,7 @@ extern int blk_verify_command(unsigned char *cmd, fmode_t has_write_perm);
 enum blk_default_limits {
 	BLK_MAX_SEGMENTS	= 128,
 	BLK_SAFE_MAX_SECTORS	= 255,
+	BLK_DEF_MAX_SECTORS	= 1024,
 	BLK_MAX_SEGMENT_SIZE	= 65536,
 	BLK_SEG_BOUNDARY_MASK	= 0xFFFFFFFFUL,
 };
