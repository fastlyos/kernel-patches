From 1b66bf997e19f3fa59e0871cce0de4778e91bce3 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Thu, 11 Apr 2019 14:01:11 +0800
Subject: [PATCH] bmq: Fix yield().

Reverst the untested code which steath in previous yield() rework.
Do not yield when there is only one task running in the rq.
---
 kernel/sched/bmq.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/kernel/sched/bmq.c b/kernel/sched/bmq.c
index defd7350ace0..751113b4d734 100644
--- a/kernel/sched/bmq.c
+++ b/kernel/sched/bmq.c
@@ -188,11 +188,11 @@ static inline void update_sched_rq_watermark(struct rq *rq)
 		return;
 
 	cpu = cpu_of(rq);
-	__cpumask_clear_cpu(cpu, &sched_rq_watermark[last_wm]);
-	if (cpumask_empty(&sched_rq_watermark[last_wm]))
-		__clear_bit(last_wm, sched_rq_watermark_bitmap);
-	__cpumask_set_cpu(cpu, &sched_rq_watermark[watermark]);
-	__set_bit(watermark, sched_rq_watermark_bitmap);
+	if (!cpumask_andnot(&sched_rq_watermark[last_wm],
+			    &sched_rq_watermark[last_wm], cpumask_of(cpu)))
+		clear_bit(last_wm, sched_rq_watermark_bitmap);
+	cpumask_set_cpu(cpu, &sched_rq_watermark[watermark]);
+	set_bit(watermark, sched_rq_watermark_bitmap);
 	rq->watermark = watermark;
 
 #ifdef CONFIG_SCHED_SMT
@@ -4630,8 +4630,9 @@ static void do_sched_yield(void)
 
 	rq = this_rq_lock_irq(&rf);
 
-	rq->skip = current;
 	schedstat_inc(rq->yld_count);
+	if (rq->nr_running > 1)
+		rq->skip = current;
 
 	/*
 	 * Since we are going to call schedule() anyway, there's
-- 
2.18.1

