
Update callers of ulist_fini() to ulist_release() after making ulist_release() public.

Signed-off-by: Holger Hoffst√§tte <holger@applied-asynchrony.com>

diff -rup a/fs/btrfs/qgroup.c b/fs/btrfs/qgroup.c
--- a/fs/btrfs/qgroup.c	2017-02-14 14:27:05.150783071 +0100
+++ b/fs/btrfs/qgroup.c	2017-02-14 14:26:20.847100083 +0100
@@ -2651,7 +2651,7 @@ int btrfs_qgroup_reserve_data(struct ino
 	if (ret < 0)
 		goto cleanup;
 
-	ulist_fini(&changeset.range_changed);
+	ulist_release(&changeset.range_changed);
 	return ret;
 
 cleanup:
@@ -2661,7 +2661,7 @@ cleanup:
 		clear_extent_bit(&BTRFS_I(inode)->io_tree, unode->val,
 				 unode->aux, EXTENT_QGROUP_RESERVED, 0, 0, NULL,
 				 GFP_NOFS);
-	ulist_fini(&changeset.range_changed);
+	ulist_release(&changeset.range_changed);
 	return ret;
 }
 
@@ -2687,7 +2687,7 @@ static int __btrfs_qgroup_release_data(s
 	if (free)
 		qgroup_free(BTRFS_I(inode)->root, changeset.bytes_changed);
 out:
-	ulist_fini(&changeset.range_changed);
+	ulist_release(&changeset.range_changed);
 	return ret;
 }
 
@@ -2801,5 +2801,5 @@ void btrfs_qgroup_check_reserved_leak(st
 		}
 		qgroup_free(BTRFS_I(inode)->root, changeset.bytes_changed);
 	}
-	ulist_fini(&changeset.range_changed);
+	ulist_release(&changeset.range_changed);
 }
diff -rup a/fs/btrfs/ulist.c b/fs/btrfs/ulist.c
--- a/fs/btrfs/ulist.c	2017-02-14 14:27:05.147449712 +0100
+++ b/fs/btrfs/ulist.c	2017-02-14 14:25:36.070084954 +0100
@@ -52,7 +52,7 @@ void ulist_init(struct ulist *ulist)
 }
 
 /**
- * ulist_fini - free up additionally allocated memory for the ulist
+ * ulist_release - free up additionally allocated memory for the ulist
  * @ulist:	the ulist from which to free the additional memory
  *
  * This is useful in cases where the base 'struct ulist' has been statically
@@ -79,7 +79,7 @@ void ulist_release(struct ulist *ulist)
  */
 void ulist_reinit(struct ulist *ulist)
 {
-	ulist_fini(ulist);
+	ulist_release(ulist);
 	ulist_init(ulist);
 }
 
@@ -105,13 +105,13 @@ struct ulist *ulist_alloc(gfp_t gfp_mask
  * ulist_free - free dynamically allocated ulist
  * @ulist:	ulist to free
  *
- * It is not necessary to call ulist_fini before.
+ * It is not necessary to call ulist_release before.
  */
 void ulist_free(struct ulist *ulist)
 {
 	if (!ulist)
 		return;
-	ulist_fini(ulist);
+	ulist_release(ulist);
 	kfree(ulist);
 }
 
