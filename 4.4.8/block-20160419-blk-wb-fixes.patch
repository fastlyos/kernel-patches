From 44d7d04f7a2c279ab978d4aa52a82185b92392ef Mon Sep 17 00:00:00 2001
From: Jens Axboe <axboe@fb.com>
Date: Tue, 19 Apr 2016 09:23:38 -0400
Subject: blk-wb: fixes

- Use div helpers for 64-bit divisions, so that 32-bit compiles work.
- Bump up window for consecutive 'unknown' latency triggers. This
  happens when we have scaled down for a read/write mix, and the reads
  then go away. For that case, we need to ease our way back up.
- Add window size to trace event

Signed-off-by: Jens Axboe <axboe@fb.com>
---
 block/blk-sysfs.c            |  4 ++--
 block/blk-wb.c               | 25 ++++++++++++++++++++++---
 block/blk-wb.h               |  2 ++
 include/trace/events/block.h | 23 +++++++++++++----------
 4 files changed, 39 insertions(+), 15 deletions(-)

diff --git a/block/blk-sysfs.c b/block/blk-sysfs.c
index 1f81610..9ddce5e 100644
--- a/block/blk-sysfs.c
+++ b/block/blk-sysfs.c
@@ -381,7 +381,7 @@ static ssize_t queue_wb_win_show(struct request_queue *q, char *page)
 	if (!q->rq_wb)
 		return -EINVAL;
 
-	return sprintf(page, "%llu\n", q->rq_wb->win_nsec / 1000ULL);
+	return sprintf(page, "%llu\n", div_u64(q->rq_wb->win_nsec, 1000));
 }
 
 static ssize_t queue_wb_win_store(struct request_queue *q, const char *page,
@@ -407,7 +407,7 @@ static ssize_t queue_wb_lat_show(struct request_queue *q, char *page)
 	if (!q->rq_wb)
 		return -EINVAL;
 
-	return sprintf(page, "%llu\n", q->rq_wb->min_lat_nsec / 1000ULL);
+	return sprintf(page, "%llu\n", div_u64(q->rq_wb->min_lat_nsec, 1000));
 }
 
 static ssize_t queue_wb_lat_store(struct request_queue *q, const char *page,
diff --git a/block/blk-wb.c b/block/blk-wb.c
index 25ad90e..30c86a5 100644
--- a/block/blk-wb.c
+++ b/block/blk-wb.c
@@ -45,6 +45,8 @@ enum {
 	RWB_MIN_WRITE_SAMPLES	= 3,
 	RWB_MIN_READ_SAMPLES	= 1,
 
+	RWB_UNKNOWN_BUMP	= 5,
+
 	/*
 	 * Target min latencies, in nsecs
 	 */
@@ -239,8 +241,8 @@ static int latency_exceeded(struct rq_wb *rwb)
 
 static void rwb_trace_step(struct rq_wb *rwb, const char *msg)
 {
-	trace_block_wb_step(msg, rwb->scale_step, rwb->wb_background,
-				rwb->wb_normal, rwb->wb_max);
+	trace_block_wb_step(msg, rwb->scale_step, rwb->cur_win_nsec,
+				rwb->wb_background, rwb->wb_normal, rwb->wb_max);
 }
 
 static void scale_up(struct rq_wb *rwb)
@@ -252,6 +254,8 @@ static void scale_up(struct rq_wb *rwb)
 		return;
 
 	rwb->scale_step--;
+	rwb->unknown_cnt = 0;
+	blk_stat_clear(rwb->q);
 	calc_wb_limits(rwb);
 
 	if (waitqueue_active(&rwb->wait))
@@ -271,6 +275,7 @@ static void scale_down(struct rq_wb *rwb)
 		return;
 
 	rwb->scale_step++;
+	rwb->unknown_cnt = 0;
 	blk_stat_clear(rwb->q);
 	calc_wb_limits(rwb);
 	rwb_trace_step(rwb, "step down");
@@ -280,7 +285,13 @@ static void rwb_arm_timer(struct rq_wb *rwb)
 {
 	unsigned long expires;
 
-	rwb->cur_win_nsec = rwb->win_nsec * 10 / int_sqrt((rwb->scale_step + 1) * 100);
+	/*
+	 * We should speed this up, using some variant of a fast integer
+	 * inverse square root calculation. Since we only do this for
+	 * every window expiration, it's not a huge deal, though.
+	 */
+	rwb->cur_win_nsec = div_u64(rwb->win_nsec * 10,
+					int_sqrt((rwb->scale_step + 1) * 100));
 	expires = jiffies + nsecs_to_jiffies(rwb->cur_win_nsec);
 	mod_timer(&rwb->window_timer, expires);
 }
@@ -303,6 +314,14 @@ static void blk_wb_timer_fn(unsigned long data)
 	case LAT_OK:
 		scale_up(rwb);
 		break;
+	case LAT_UNKNOWN:
+		/*
+		 * We had no read samples, start bumping up the write
+		 * depth slowly
+		 */
+		if (++rwb->unknown_cnt >= RWB_UNKNOWN_BUMP)
+			scale_up(rwb);
+		break;
 	default:
 		break;
 	}
diff --git a/block/blk-wb.h b/block/blk-wb.h
index 6154f3a..222d9ef 100644
--- a/block/blk-wb.h
+++ b/block/blk-wb.h
@@ -17,6 +17,8 @@ struct rq_wb {
 	u64 win_nsec;				/* default window size */
 	u64 cur_win_nsec;			/* current window size */
 
+	unsigned int unknown_cnt;
+
 	struct timer_list window_timer;
 
 	s64 sync_issue;
diff --git a/include/trace/events/block.h b/include/trace/events/block.h
index 8ae9f47..4b8b795 100644
--- a/include/trace/events/block.h
+++ b/include/trace/events/block.h
@@ -701,8 +701,8 @@ TRACE_EVENT(block_wb_stat,
 		__entry->wnr_samples	= stat[1].nr_samples;
 	),
 
-	TP_printk("read lat: mean=%llu, min=%llu, max=%llu, samples=%llu,"
-		  "write lat: mean=%llu, min=%llu, max=%llu, samples=%llu\n",
+	TP_printk("rmean=%llu, rmin=%llu, rmax=%llu, rsamples=%llu, "
+		  "wmean=%llu, wmin=%llu, wmax=%llu, wsamples=%llu\n",
 		  __entry->rmean, __entry->rmin, __entry->rmax,
 		  __entry->rnr_samples, __entry->wmean, __entry->wmin,
 		  __entry->wmax, __entry->wnr_samples)
@@ -726,27 +726,29 @@ TRACE_EVENT(block_wb_lat,
 		__entry->lat		= lat;
 	),
 
-	TP_printk("Latency %llu\n", (unsigned long long) __entry->lat)
+	TP_printk("latency %llu\n", (unsigned long long) __entry->lat)
 );
 
 /**
  * block_wb_step - trace wb event step
  * @msg: context message
  * @step: the current scale step count
+ * @window: the current monitoring window
  * @bg: the current background queue limit
  * @normal: the current normal writeback limit
  * @max: the current max throughput writeback limit
  */
 TRACE_EVENT(block_wb_step,
 
-	TP_PROTO(const char *msg, unsigned int step, unsigned int bg,
-		 unsigned int normal, unsigned int max),
+	TP_PROTO(const char *msg, unsigned int step, unsigned long window,
+		 unsigned int bg, unsigned int normal, unsigned int max),
 
-	TP_ARGS(msg, step, bg, normal, max),
+	TP_ARGS(msg, step, window, bg, normal, max),
 
 	TP_STRUCT__entry(
 		__field( const char *,	msg 	)
-		__field( unsigned int, step )
+		__field( unsigned int,	step	)
+		__field( unsigned long,	window	)
 		__field( unsigned int,	bg 	)
 		__field( unsigned int,	normal	)
 		__field( unsigned int,	max 	)
@@ -755,14 +757,15 @@ TRACE_EVENT(block_wb_step,
 	TP_fast_assign(
 		__entry->msg		= msg;
 		__entry->step		= step;
+		__entry->window		= window;
 		__entry->bg		= bg;
 		__entry->normal		= normal;
 		__entry->max		= max;
 	),
 
-	TP_printk("%s: step=%u, background=%u, normal=%u, max=%u\n",
-		  __entry->msg, __entry->step, __entry->bg, __entry->normal,
-		  __entry->max)
+	TP_printk("%s: step=%u, window=%lu, background=%u, normal=%u, max=%u\n",
+		  __entry->msg, __entry->step, __entry->window, __entry->bg,
+		  __entry->normal, __entry->max)
 );
 
 #endif /* _TRACE_BLOCK_H */
-- 
cgit v0.11.2

