From 8f16832f75239f5df8802c6d69ce5664c449295b Mon Sep 17 00:00:00 2001
From: Jens Axboe <axboe@fb.com>
Date: Mon, 18 Apr 2016 11:10:47 -0500
Subject: blk-wb: don't hardcode window size in rwb_arm_timer()

Use the enum at the top to set it, and split the window size in a
default and current window.

Signed-off-by: Jens Axboe <axboe@fb.com>
---
 block/blk-wb.c | 7 ++++---
 block/blk-wb.h | 5 +++--
 2 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/block/blk-wb.c b/block/blk-wb.c
index 1b1d808..25ad90e 100644
--- a/block/blk-wb.c
+++ b/block/blk-wb.c
@@ -216,7 +216,7 @@ static int __latency_exceeded(struct rq_wb *rwb, struct blk_rq_stat *stat)
 	 * flag the latency as exceeded.
 	 */
 	thislat = rwb_sync_issue_lat(rwb);
-	if (thislat > rwb->win_nsec ||
+	if (thislat > rwb->cur_win_nsec ||
 	    (thislat > rwb->min_lat_nsec && !stat[0].nr_samples)) {
 		trace_block_wb_lat(thislat);
 		return LAT_EXCEEDED;
@@ -280,8 +280,8 @@ static void rwb_arm_timer(struct rq_wb *rwb)
 {
 	unsigned long expires;
 
-	rwb->win_nsec = 1000000000ULL / int_sqrt((rwb->scale_step + 1) * 100);
-	expires = jiffies + nsecs_to_jiffies(rwb->win_nsec);
+	rwb->cur_win_nsec = rwb->win_nsec * 10 / int_sqrt((rwb->scale_step + 1) * 100);
+	expires = jiffies + nsecs_to_jiffies(rwb->cur_win_nsec);
 	mod_timer(&rwb->window_timer, expires);
 }
 
@@ -479,6 +479,7 @@ void blk_wb_init(struct request_queue *q)
 	else
 		rwb->min_lat_nsec = RWB_ROT_LAT;
 
+	rwb->win_nsec = RWB_WINDOW_NSEC;
 	blk_wb_update_limits(rwb);
 	q->rq_wb = rwb;
 }
diff --git a/block/blk-wb.h b/block/blk-wb.h
index 6ad4719..6154f3a 100644
--- a/block/blk-wb.h
+++ b/block/blk-wb.h
@@ -14,7 +14,8 @@ struct rq_wb {
 	unsigned int wb_max;			/* max throughput writeback */
 	unsigned int scale_step;
 
-	u64 win_nsec;
+	u64 win_nsec;				/* default window size */
+	u64 cur_win_nsec;			/* current window size */
 
 	struct timer_list window_timer;
 
@@ -26,8 +27,8 @@ struct rq_wb {
 	unsigned long min_lat_nsec;
 	atomic_t *bdp_wait;
 	struct request_queue *q;
-	atomic_t inflight;
 	wait_queue_head_t wait;
+	atomic_t inflight;
 };
 
 void __blk_wb_done(struct rq_wb *);
-- 
cgit v0.11.2

