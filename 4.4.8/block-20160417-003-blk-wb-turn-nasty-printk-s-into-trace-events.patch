From 11470b4c7751572f7e1def3196d172caacd49e93 Mon Sep 17 00:00:00 2001
From: Jens Axboe <axboe@fb.com>
Date: Sun, 17 Apr 2016 15:55:07 -0600
Subject: [PATCH] blk-wb: turn nasty printk's into trace events

Add a few trace_block_wb_* events to log internal changes.

Signed-off-by: Jens Axboe <axboe@fb.com>
---
 block/blk-wb.c               | 25 ++++++-----
 include/trace/events/block.h | 99 ++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 111 insertions(+), 13 deletions(-)

diff --git a/block/blk-wb.c b/block/blk-wb.c
index daa0c6c..9e3afea 100644
--- a/block/blk-wb.c
+++ b/block/blk-wb.c
@@ -13,6 +13,7 @@
 #include <linux/kernel.h>
 #include <linux/bio.h>
 #include <linux/blkdev.h>
+#include <trace/events/block.h>
 
 #include "blk.h"
 #include "blk-wb.h"
@@ -69,15 +70,6 @@ static bool atomic_inc_below(atomic_t *v, int below)
 	return true;
 }
 
-static void print_lat(struct blk_rq_stat *stat, unsigned long maxlat)
-{
-	printk(KERN_ERR "blk-wb: %lu > %lu\n", (unsigned long) stat[0].min, maxlat);
-	printk(KERN_ERR "   read lat: mean=%llu, min=%llu, max=%llu, samples=%llu\n",
-			stat[0].mean, stat[0].min, stat[0].max, stat[0].nr_samples);
-	printk(KERN_ERR "  write lat: mean=%llu, min=%llu, max=%llu, samples=%llu\n",
-			stat[1].mean, stat[1].min, stat[1].max, stat[1].nr_samples);
-}
-
 static void wb_timestamp(struct rq_wb *rwb, unsigned long *var)
 {
 	if (rwb_enabled(rwb)) {
@@ -200,10 +192,11 @@ static int __latency_exceeded(struct rq_wb *rwb, struct blk_rq_stat *stat)
 		maxlat = RWB_ROT_LAT;
 
 	if (stat[0].min > maxlat) {
-		print_lat(stat, maxlat);
+		trace_block_wb_lat(maxlat);
+		trace_block_wb_stat(stat);
 		return LAT_EXCEEDED;
 	} else if ((thislat = rwb_sync_issue_lat(rwb)) > maxlat) {
-		printk(KERN_ERR "sync lat %llu > %llu\n", thislat, maxlat);
+		trace_block_wb_lat(maxlat);
 		return LAT_EXCEEDED;
 	}
 
@@ -232,6 +225,12 @@ static void step_down(struct rq_wb *rwb)
 	calc_wb_limits(rwb);
 }
 
+static void rwb_trace_step(struct rq_wb *rwb, const char *msg)
+{
+	trace_block_wb_step(msg, rwb->scale_step, rwb->perc, rwb->wb_background,
+				rwb->wb_normal, rwb->wb_max);
+}
+
 static void blk_wb_timer_fn(unsigned long data)
 {
 	struct rq_wb *rwb = (struct rq_wb *) data;
@@ -246,14 +245,14 @@ static void blk_wb_timer_fn(unsigned long data)
 	switch (status) {
 	case LAT_EXCEEDED:
 		step_down(rwb);
-		printk(KERN_ERR "blk-wb: stepping down: %d\n", rwb->scale_step);
+		rwb_trace_step(rwb, "Down step");
 		break;
 	case LAT_OK:
 		if (rwb->scale_step) {
-			printk(KERN_ERR "blk-wb: reset\n");
 			rwb->scale_step = 0;
 			rwb->perc = 100;
 			calc_wb_limits(rwb);
+			rwb_trace_step(rwb, "Reset");
 		}
 		break;
 	default:
diff --git a/include/trace/events/block.h b/include/trace/events/block.h
index e8a5eca..9e3d62c 100644
--- a/include/trace/events/block.h
+++ b/include/trace/events/block.h
@@ -667,6 +667,105 @@ TRACE_EVENT(block_rq_remap,
 		  (unsigned long long)__entry->old_sector, __entry->nr_bios)
 );
 
+/**
+ * block_wb_stat - trace stats for blk_wb
+ * @rwb: rq_wb structure
+ * @stat: array of read/write stats
+ */
+TRACE_EVENT(block_wb_stat,
+
+	TP_PROTO(struct blk_rq_stat *stat),
+
+	TP_ARGS(stat),
+
+	TP_STRUCT__entry(
+		__field( s64,		rmean		)
+		__field( u64,		rmin		)
+		__field( u64,		rmax		)
+		__field( s64,		rnr_samples	)
+		__field( s64,		rtime		)
+		__field( s64,		wmean		)
+		__field( u64,		wmin		)
+		__field( u64,		wmax		)
+		__field( s64,		wnr_samples	)
+		__field( s64,		wtime		)
+	),
+
+	TP_fast_assign(
+		__entry->rmean		= stat[0].mean;
+		__entry->rmin		= stat[0].min;
+		__entry->rmax		= stat[0].max;
+		__entry->rnr_samples	= stat[0].nr_samples;
+		__entry->wmean		= stat[1].mean;
+		__entry->wmin		= stat[1].min;
+		__entry->wmax		= stat[1].max;
+		__entry->wnr_samples	= stat[1].nr_samples;
+	),
+
+	TP_printk("   read lat: mean=%llu, min=%llu, max=%llu, samples=%llu\n"
+		  "  write lat: mean=%llu, min=%llu, max=%llu, samples=%llu\n",
+		  __entry->rmean, __entry->rmin, __entry->rmax,
+		  __entry->rnr_samples, __entry->wmean, __entry->wmin,
+		  __entry->wmax, __entry->wnr_samples)
+);
+
+/**
+ * block_wb_lat - trace latency event
+ * @rwb: rq_wb structure
+ * @lat: latency trigger
+ */
+TRACE_EVENT(block_wb_lat,
+
+	TP_PROTO(unsigned long lat),
+
+	TP_ARGS(lat),
+
+	TP_STRUCT__entry(
+		__field( unsigned long,	lat	)
+	),
+
+	TP_fast_assign(
+		__entry->lat		= lat;
+	),
+
+	TP_printk("Latency %llu\n", (unsigned long long) __entry->lat)
+);
+
+/**
+ * block_wb_step - trace wb event step
+ * @rwb: rq_wb structure
+ * @lat: latency trigger
+ */
+TRACE_EVENT(block_wb_step,
+
+	TP_PROTO(const char *msg, unsigned int step, unsigned int perc,
+		 unsigned int bg, unsigned int normal, unsigned int max),
+
+	TP_ARGS(msg, step, perc, bg, normal, max),
+
+	TP_STRUCT__entry(
+		__field( const char *,	msg 	)
+		__field( unsigned int, step )
+		__field( unsigned int,	perc 	)
+		__field( unsigned int,	bg 	)
+		__field( unsigned int,	normal	)
+		__field( unsigned int,	max 	)
+	),
+
+	TP_fast_assign(
+		__entry->msg		= msg;
+		__entry->step		= step;
+		__entry->perc		= perc;
+		__entry->bg		= bg;
+		__entry->normal		= normal;
+		__entry->max		= max;
+	),
+
+	TP_printk("%s: step=%u, perc=%u, background=%u, normal=%u, max=%u\n",
+		  __entry->msg, __entry->step, __entry->perc, __entry->bg,
+		  __entry->normal, __entry->max)
+);
+
 #endif /* _TRACE_BLOCK_H */
 
 /* This part must be outside protection */
-- 
2.8.1

