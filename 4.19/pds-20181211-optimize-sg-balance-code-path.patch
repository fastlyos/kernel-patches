From b648fed4113bede322b796d1cd1c569c32d6231b Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Tue, 11 Dec 2018 16:39:20 +0800
Subject: [PATCH] pds: Optimize sg balance code path.

---
 kernel/sched/pds.c | 9 +++------
 1 file changed, 3 insertions(+), 6 deletions(-)

diff --git a/kernel/sched/pds.c b/kernel/sched/pds.c
index 53ab54479c9f..e620d505393a 100644
--- a/kernel/sched/pds.c
+++ b/kernel/sched/pds.c
@@ -2860,17 +2860,17 @@ static inline void pds_scheduler_task_tick(struct rq *rq)
 #ifdef CONFIG_SCHED_SMT
 static int active_load_balance_cpu_stop(void *data)
 {
-	struct rq *origin_rq, *rq = this_rq();
+	struct rq *rq = this_rq();
 	struct task_struct *p = data;
 	cpumask_t tmp;
 	unsigned long flags;
 
-	origin_rq = rq;
 	local_irq_save(flags);
 
 	raw_spin_lock(&p->pi_lock);
 	raw_spin_lock(&rq->lock);
 
+	rq->active_balance = 0;
 	/*
 	 * _something_ may have changed the task, double check again
 	 */
@@ -2878,8 +2878,6 @@ static int active_load_balance_cpu_stop(void *data)
 	    cpumask_and(&tmp, &p->cpus_allowed, &sched_cpu_sg_idle_mask))
 		rq = __migrate_task(rq, p, cpumask_any(&tmp));
 
-	origin_rq->active_balance = 0;
-
 	raw_spin_unlock(&rq->lock);
 	raw_spin_unlock(&p->pi_lock);
 
@@ -2894,13 +2892,12 @@ static void pds_sg_balance_trigger(const int cpu)
 	struct rq *rq = cpu_rq(cpu);
 	unsigned long flags;
 	struct task_struct *curr;
-	cpumask_t tmp;
 
 	if (!raw_spin_trylock_irqsave(&rq->lock, flags))
 		return;
 	curr = rq->curr;
 	if (!is_idle_task(curr) &&
-	    cpumask_and(&tmp, &curr->cpus_allowed, &sched_cpu_sg_idle_mask)) {
+	    cpumask_intersects(&curr->cpus_allowed, &sched_cpu_sg_idle_mask)) {
 		int active_balance = 0;
 
 		if (likely(!rq->active_balance)) {
-- 
2.18.1

