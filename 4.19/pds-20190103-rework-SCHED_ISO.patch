From 35f740c32e2eab217f0a95e5a43232012de73222 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Thu, 3 Jan 2019 16:07:36 +0800
Subject: [PATCH] pds: Rework SCHED_ISO

SCHED_ISO tasks now have higher priority to be pick up and run than
SCHED_NORMAL tasks. When its remaining time slice(default max 4ms in
PDS) run out, they will degrade to SCHED_NORMAL(and nice level kicks
in). The degradation will be continued when they still hungry for cpu.

The above design makes SCHED_ISO good for interactivity but not cpu
consumption tasks.
---
 kernel/sched/pds.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/kernel/sched/pds.c b/kernel/sched/pds.c
index c4221b35dbf1..8f821622084f 100644
--- a/kernel/sched/pds.c
+++ b/kernel/sched/pds.c
@@ -2012,6 +2012,12 @@ static int try_to_wake_up(struct task_struct *p, unsigned int state,
 		atomic_dec(&task_rq(p)->nr_iowait);
 	}
 
+	if (SCHED_ISO == p->policy && ISO_PRIO != p->prio) {
+		p->prio = ISO_PRIO;
+		p->deadline = 0UL;
+		update_task_priodl(p);
+	}
+
 	cpu = select_task_rq(p);
 
 	if (cpu != task_cpu(p)) {
@@ -3169,6 +3175,11 @@ static inline void check_deadline(struct task_struct *p, struct rq *rq)
 
 	if (p->time_slice < RESCHED_US) {
 		time_slice_expired(p, rq);
+		if (SCHED_ISO == p->policy && ISO_PRIO == p->prio) {
+			p->prio = NORMAL_PRIO;
+			p->deadline = rq->clock + task_deadline_diff(p);
+			update_task_priodl(p);
+		}
 		if (SCHED_FIFO != p->policy && task_on_rq_queued(p))
 			requeue_task(p, rq);
 	}
-- 
2.18.1

