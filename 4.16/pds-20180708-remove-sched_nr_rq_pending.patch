From 2950d0deb5f6f3b075fb8d7776150bd6ebbf9044 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Sun, 8 Jul 2018 10:37:37 +0800
Subject: [PATCH] pds: Remove sched_nr_rq_pending.

---
 kernel/sched/pds.c | 14 +++-----------
 1 file changed, 3 insertions(+), 11 deletions(-)

diff --git a/kernel/sched/pds.c b/kernel/sched/pds.c
index a5764f7a0084..0e909fd6988f 100644
--- a/kernel/sched/pds.c
+++ b/kernel/sched/pds.c
@@ -196,7 +196,6 @@ static DECLARE_BITMAP(sched_rq_queued_masks_bitmap, NR_SCHED_RQ_QUEUED_LEVEL)
 ____cacheline_aligned_in_smp;
 
 static cpumask_t sched_rq_pending_mask ____cacheline_aligned_in_smp;
-static unsigned int sched_nr_rq_pending ____cacheline_aligned_in_smp;
 
 DEFINE_PER_CPU(cpumask_t [NR_CPU_AFFINITY_CHK_LEVEL], sched_cpu_affinity_chk_masks);
 DEFINE_PER_CPU(cpumask_t *, sched_cpu_affinity_chk_end_masks);
@@ -554,10 +553,8 @@ static inline void dequeue_task(struct task_struct *p, struct rq *rq)
 		update_sched_rq_queued_masks(rq);
 	rq->nr_running--;
 #ifdef CONFIG_SMP
-	if (1 == rq->nr_running) {
+	if (1 == rq->nr_running)
 		cpumask_clear_cpu(cpu_of(rq), &sched_rq_pending_mask);
-		sched_nr_rq_pending = cpumask_weight(&sched_rq_pending_mask);
-	}
 #endif
 
 	sched_update_tick_dependency(rq);
@@ -659,10 +656,8 @@ static inline void enqueue_task(struct task_struct *p, struct rq *rq)
 		update_sched_rq_queued_masks(rq);
 	rq->nr_running++;
 #ifdef CONFIG_SMP
-	if (2 == rq->nr_running) {
+	if (2 == rq->nr_running)
 		cpumask_set_cpu(cpu_of(rq), &sched_rq_pending_mask);
-		sched_nr_rq_pending = cpumask_weight(&sched_rq_pending_mask);
-	}
 #endif
 
 	sched_update_tick_dependency(rq);
@@ -3297,12 +3292,9 @@ static inline struct task_struct *take_other_rq_task(int cpu)
 	struct cpumask tmp;
 	struct cpumask *affinity_mask, *end;
 
-	if (0 == sched_nr_rq_pending)
+	if (cpumask_empty(&sched_rq_pending_mask))
 		return NULL;
 
-	if (1 == sched_nr_rq_pending)
-		return take_queued_task_cpumask(cpu, &sched_rq_pending_mask);
-
 	affinity_mask = &(per_cpu(sched_cpu_affinity_chk_masks, cpu)[0]);
 	end = per_cpu(sched_cpu_affinity_chk_end_masks, cpu);
 	for (;affinity_mask < end; affinity_mask++) {
